import streamlit as st
from pymongo import MongoClient
from pymongo.errors import ConnectionFailure, OperationFailure
from bson import ObjectId
import datetime

@st.cache_resource
def get_db_client(mongo_uri):
    """K·∫øt n·ªëi t·ªõi MongoDB v√† tr·∫£ v·ªÅ client. Cache resource ƒë·ªÉ tr√°nh k·∫øt n·ªëi l·∫°i."""
    try:
        # Th·ª≠ ph∆∞∆°ng ph√°p k·∫øt n·ªëi ch√≠nh (v·ªõi TLS configuration hi·ªán ƒë·∫°i)
        client = MongoClient(
            mongo_uri, 
            serverSelectionTimeoutMS=30000,  # TƒÉng timeout
            connectTimeoutMS=30000,
            socketTimeoutMS=30000,
            tls=True,  # S·ª≠ d·ª•ng tls thay v√¨ ssl
            tlsAllowInvalidCertificates=True,  # Cho ph√©p certificate kh√¥ng h·ª£p l·ªá
            retryWrites=True,  # Cho ph√©p retry writes
            w='majority'  # Write concern
        )
        client.admin.command('ping')
        st.success("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng!")
        return client
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Ph∆∞∆°ng ph√°p k·∫øt n·ªëi ch√≠nh th·∫•t b·∫°i: {e}")
        
        # Th·ª≠ ph∆∞∆°ng ph√°p k·∫øt n·ªëi thay th·∫ø 1 (v·ªõi SSL legacy)
        try:
            client = MongoClient(
                mongo_uri,
                serverSelectionTimeoutMS=30000,
                connectTimeoutMS=30000,
                socketTimeoutMS=30000,
                ssl=True,  # S·ª≠ d·ª•ng SSL legacy
                ssl_cert_reqs=None,  # Kh√¥ng y√™u c·∫ßu certificate
                retryWrites=True
            )
            client.admin.command('ping')
            st.success("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng (ph∆∞∆°ng ph√°p thay th·∫ø 1)!")
            return client
        except Exception as e2:
            st.warning(f"‚ö†Ô∏è Ph∆∞∆°ng ph√°p k·∫øt n·ªëi thay th·∫ø 1 th·∫•t b·∫°i: {e2}")
            
            # Th·ª≠ ph∆∞∆°ng ph√°p k·∫øt n·ªëi thay th·∫ø 2 (c∆° b·∫£n nh·∫•t)
            try:
                client = MongoClient(
                    mongo_uri,
                    serverSelectionTimeoutMS=30000
                )
                client.admin.command('ping')
                st.success("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng (ph∆∞∆°ng ph√°p thay th·∫ø 2)!")
                return client
            except Exception as e3:
                st.error(f"‚ùå T·∫•t c·∫£ ph∆∞∆°ng ph√°p k·∫øt n·ªëi ƒë·ªÅu th·∫•t b·∫°i:")
                st.error(f"L·ªói ch√≠nh: {e}")
                st.error(f"L·ªói thay th·∫ø 1: {e2}")
                st.error(f"L·ªói thay th·∫ø 2: {e3}")
                st.info("üí° G·ª£i √Ω: Ki·ªÉm tra l·∫°i MongoDB URI v√† ƒë·∫£m b·∫£o r·∫±ng cluster ƒëang ho·∫°t ƒë·ªông.")
                return None

def get_database_name():
    """L·∫•y t√™n database d·ª±a tr√™n user group."""
    user_group = st.session_state.get("user_group")
    if user_group == "ADMIN":
        return "ai_tools_admin_db"
    elif user_group == "GUEST":
        return "ai_tools_guest_db"
    else:
        return "ai_tools_default_db"  # fallback

def get_collection(collection_name):
    """L·∫•y m·ªôt collection t·ª´ database t∆∞∆°ng ·ª©ng v·ªõi user group."""
    if st.session_state.get("mongo_uri"):
        if "db_client" not in st.session_state or st.session_state.db_client is None:
            st.session_state.db_client = get_db_client(st.session_state.mongo_uri)
        if st.session_state.db_client:
            # S·ª≠ d·ª•ng database ri√™ng cho t·ª´ng user group
            db_name = get_database_name()
            db = st.session_state.db_client[db_name]
            collection = db[collection_name]
            return collection
    return None

# --- Prompts Collection Functions ---

def get_all_prompts():
    """L·∫•y t·∫•t c·∫£ prompts t·ª´ DB c·ªßa user hi·ªán t·∫°i."""
    prompts_coll = get_collection("system_prompts")
    if prompts_coll is not None:
        return list(prompts_coll.find())
    return []

def save_prompt(name, content, tags):
    """L∆∞u m·ªôt prompt m·ªõi ho·∫∑c c·∫≠p nh·∫≠t prompt ƒë√£ c√≥ cho user hi·ªán t·∫°i."""
    prompts_coll = get_collection("system_prompts")
    if prompts_coll is not None:
        doc = {
            "name": name,
            "content": content,
            "tags": tags,
            "user_group": st.session_state.get("user_group"),  # Th√™m user_group ƒë·ªÉ ph√¢n bi·ªát
            "created_at": datetime.datetime.now(datetime.timezone.utc),
            "last_used": None,
            "used_count": 0
        }
        prompts_coll.insert_one(doc)
        return True
    return False

def update_prompt(prompt_id, data):
    """C·∫≠p nh·∫≠t m·ªôt prompt c·ªßa user hi·ªán t·∫°i."""
    prompts_coll = get_collection("system_prompts")
    if prompts_coll is not None:
        # Th√™m user_group filter ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ update prompt c·ªßa user hi·ªán t·∫°i
        filter_query = {
            "_id": ObjectId(prompt_id),
            "user_group": st.session_state.get("user_group")
        }
        prompts_coll.update_one(filter_query, {"$set": data})
        return True
    return False

def delete_prompt(prompt_id):
    """X√≥a m·ªôt prompt c·ªßa user hi·ªán t·∫°i."""
    prompts_coll = get_collection("system_prompts")
    if prompts_coll is not None:
        # Th√™m user_group filter ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ x√≥a prompt c·ªßa user hi·ªán t·∫°i
        filter_query = {
            "_id": ObjectId(prompt_id),
            "user_group": st.session_state.get("user_group")
        }
        prompts_coll.delete_one(filter_query)
        return True
    return False

# --- Chat Sessions Collection Functions ---

def get_all_chat_sessions():
    """L·∫•y t·∫•t c·∫£ phi√™n chat t·ª´ DB c·ªßa user hi·ªán t·∫°i, s·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t."""
    chat_coll = get_collection("chat_sessions")
    if chat_coll is not None:
        # Filter theo user_group
        filter_query = {"user_group": st.session_state.get("user_group")}
        return list(chat_coll.find(filter_query).sort("updated_at", -1))
    return []

def get_chat_session(session_id):
    """L·∫•y m·ªôt phi√™n chat c·ª• th·ªÉ theo ID c·ªßa user hi·ªán t·∫°i."""
    chat_coll = get_collection("chat_sessions")
    if chat_coll is not None:
        # Th√™m user_group filter
        filter_query = {
            "_id": ObjectId(session_id),
            "user_group": st.session_state.get("user_group")
        }
        return chat_coll.find_one(filter_query)
    return None

def delete_chat_session(session_id):
    """X√≥a m·ªôt phi√™n chat c·ªßa user hi·ªán t·∫°i."""
    chat_coll = get_collection("chat_sessions")
    if chat_coll is not None:
        # Th√™m user_group filter
        filter_query = {
            "_id": ObjectId(session_id),
            "user_group": st.session_state.get("user_group")
        }
        chat_coll.delete_one(filter_query)
        return True
    return False

def save_chat_session(session_data):
    """L∆∞u m·ªôt phi√™n chat v√†o DB c·ªßa user hi·ªán t·∫°i."""
    chat_coll = get_collection("chat_sessions")
    if chat_coll is not None:
        session_data["updated_at"] = datetime.datetime.now(datetime.timezone.utc)
        session_data["user_group"] = st.session_state.get("user_group")  # Th√™m user_group
        
        if "_id" in session_data and session_data["_id"] is not None:
            # Update existing session - th√™m user_group filter
            filter_query = {
                "_id": session_data["_id"],
                "user_group": st.session_state.get("user_group")
            }
            chat_coll.update_one(filter_query, {"$set": session_data})
            return session_data["_id"]
        else:
            # Create new session
            session_data.pop("_id", None)
            session_data["created_at"] = datetime.datetime.now(datetime.timezone.utc)
            result = chat_coll.insert_one(session_data)
            return result.inserted_id
    return None 